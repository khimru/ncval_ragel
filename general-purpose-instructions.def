# File format: three rows separated by commas.  Line describes one instruction.
################################################################################
# First column: instruction description.
#   Includes name of the instruction and arguments.
#
#   Arguments consist of two parts: argument type and argument size.
#
#      Possible argument types:
#	a: Accumulator (%al/%ax/%eax/%rax depending on size)
#	r: Register in opcode (low 3 bits plus rex.B)
#	d: Accumulator pair (%dx:%ax/%edx:%eax/%rdx:%rax depending on size)
#	E: General purpose register or memory operand specified by the r/m
#	   field of the ModRM byte.  For memory operands, the ModRM byte may
#	   be followed by a SIB byte to specify one of the indexed
#	   register-indirect addressing forms.
#	G: General purpose register specified by the reg field of ModRM.
#	I: Immediate value encoded in the instruction.
#      Possible sizes:
#	‚êÄ: A byte, word, doubleword, or quadword (in 64-bit mode),
#	   depending on the effective operand size.
#	b: A byte, irrespective of the effective operand size.
#	d: A doubleword (32bit), irrespective of the effective operand size.
#	q: A quadword (64bit), irrespective of the effective operand size.
#	r: Register size (32bit in 32bit mode, 64bit in 64bit mode).
#	v: A word, doubleword, or quadword (in 64-bit mode), depending on
#	   the effective operand size.
#	z: A word if the effective operand size is 16 bits, or a doubleword
#	   if the effective operand size is 32 or 64 bits.
#################################################################################
# Second column: instruction opcodes.
#   Includes all opcode bytes.  If first opcode bytes is 0x66, 0xf2, or 0xf3
#   then they can be moved before other prefixes (and will be moved before REX
#   prefix if it's allowed).  Should include opcode "bytes" /0, /1, ..., /7 if
#   part of the opcode is stored in ModRM byte.
#################################################################################
# Third column: additional instruction notes.
#   Different kind of notes for the instruction: untypical prefixes (for example
#   "lock" prefix or "rep" prefix), CPUID checks, etc.
#
#     Possible prefixes:
#	condrep: prefixes "repe" and "repne" are allowed for the instruction
#	lock: prefix "lock" is allowed for the instruction
#	rep: prefix "rep" is allowed for the instruction
#
#     Possible CPUID values:
#	x87: x87 instruction
#################################################################################
adc G E, 0x10, lock
adc E G, 0x12, lock
adc I a, 0x14, lock
add G E, 0x00, lock
add E G, 0x02, lock
add I a, 0x04, lock
and G E, 0x20, lock
and E G, 0x22, lock
and I a, 0x24, lock
cmp G E, 0x38, lock
cmp E G, 0x3a, lock
cmp I a, 0x3c, lock
imul Iz Ev Gv, 0x69
imul Ib Ev Gv, 0x6b
or G E, 0x08, lock
or E G, 0x0a, lock
or I a, 0x0c, lock
pop rr, 0x58
push rr, 0x50
push Iz, 0x68
push Ib, 0x6a
sbb G E, 0x18, lock
sbb E G, 0x1a, lock
sbb I a, 0x1c, lock
sub G E, 0x28, lock
sub E G, 0x2a, lock
sub I a, 0x2c, lock
xor G E, 0x30, lock
xor E G, 0x32, lock
xor I a, 0x34, lock
